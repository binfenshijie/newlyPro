<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="10 seconds">

    <!-- spring boot项目名称 -->
    <property name="springAppName" value="vas-server"/>
    <property name="log.charset" value="utf8"/> <!-- 日志编码 -->
    <property name="log.base" value="../logs/${springAppName}"/>
    <property name="log.max.size" value="25MB"/> <!-- 日志文件大小,超过这个大小将重新创建,可以根据实际情况调整-->
    <property name="log.max.index" value="20"/>  <!-- 日志最大循环保留个数，可以根据实际情况调整-->

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 日志格式-->
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %p ${springAppName} [%thread] [%logger{80}]%X{X-HIK_TRACE:-}%X{X-HIK_ERROR_CODE:-} - %msg %n "/>

    <property name="BUSINESS_FILE_LOG_PATTERN" value="%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} - %msg %n"/>

    <!--控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!-- Minimum logging level to be presented in the console logs-->
            <level>DEBUG</level>
        </filter>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${FILE_LOG_PATTERN}</Pattern>
<!--            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>-->
            <charset>${log.charset}</charset>
        </encoder>
    </appender>

    <!-- 用来保存输出DEBUG级别的日志 -->
    <appender name="file.debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${springAppName}.debug.log</File><!-- 设置日志不超过${log.max.size}时的保存路径，注意如果
            是web项目会保存到Tomcat的bin目录 下 -->
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>${log.base}/${springAppName}.debug.log.%i</FileNamePattern>
            <MinIndex>1</MinIndex>
            <MaxIndex>${log.max.index}</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy
                class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>${log.max.size}</MaxFileSize>
        </triggeringPolicy>
        <!-- 日志输出的文件的格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
        <!-- 下面为配置输出DEBUG级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!-- 这也是用来保存输出INFO级别以上的日志 -->
    <appender name="file.info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${springAppName}.info.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>${log.base}/${springAppName}.info.log.%i</FileNamePattern>
            <MinIndex>1</MinIndex>
            <MaxIndex>${log.max.index}</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy
                class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>${log.max.size}</MaxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
        <!-- 下面为配置输出INFO级别以上的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!-- 只用保存输出error级别的日志 -->
    <appender name="file.error"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${springAppName}.error.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>${log.base}/${springAppName}.error.log.%i</FileNamePattern>
            <MinIndex>1</MinIndex>
            <MaxIndex>${log.max.index}</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy
                class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>${log.max.size}</MaxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
        <!-- 下面为配置只输出error级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <!-- 添加附加的appender,最多只能添加一个 -->
    <appender name="file.async" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="file.debug"/>
    </appender>

    <appender name="file.async.info" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="file.info"/>
    </appender>

    <!-- 为了对接操作日志-->
    <!--<logger name="com.newly.common.boot.operationLog.interceptor.OperationLogInterceptor" level="INFO">-->
    <!--<appender-ref ref="file.business" />-->
    <!--</logger>-->

    <appender name="file.qiniu.common.debug"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${springAppName}.ga.debug.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>${log.base}/${springAppName}.ga.debug.log.%i</FileNamePattern>
            <MinIndex>1</MinIndex>
            <MaxIndex>${log.max.index}</MaxIndex>
        </rollingPolicy>
        <triggeringPolicy
                class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>${log.max.size}</MaxFileSize>
        </triggeringPolicy>
        <encoder>
            <pattern>${BUSINESS_FILE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <!--七牛标准库日志打印-->
    <logger name="com.qiniu.common" level="DEBUG" additivity="false">
        <appender-ref ref="file.qiniu.common.debug"/>
    </logger>

    <logger name="com.qiniu" level="DEBUG" additivity="false">
        <appender-ref ref="stdout"/>
        <appender-ref ref="file.debug"/>
        <appender-ref ref="file.error"/>
        <appender-ref ref="file.info"/>
    </logger>

    <!-- root 设为INFO 以关掉Hibernate 和 spring 的debug日志输出-->
    <root level="INFO">
        <appender-ref ref="stdout"/> <!--  标识这个appender将会添加到这个logger -->
        <appender-ref ref="file.async.info"/>
        <appender-ref ref="file.debug"/>
        <appender-ref ref="file.error"/>
    </root>

</configuration>